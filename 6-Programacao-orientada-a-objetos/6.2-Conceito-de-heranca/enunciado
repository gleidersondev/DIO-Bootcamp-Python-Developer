
ğŸ“Œ ExercÃ­cio 1: Cadastro de Clientes
Crie uma funÃ§Ã£o chamada cadastrar_cliente que receba kwargs para armazenar
 os dados de um cliente, como nome, email, telefone e cidade. Se algum dado
  nÃ£o for informado, ele deve receber um valor padrÃ£o:

ğŸ”¹ Regras:
âœ… O nome Ã© obrigatÃ³rio.
âœ… O email e o telefone devem ter valores padrÃ£o "NÃ£o informado".
âœ… A cidade deve ter valor padrÃ£o "Cidade nÃ£o especificada".
âœ… A funÃ§Ã£o deve retornar um dicionÃ¡rio com os dados do cliente.

ğŸ’¡ Exemplo de uso:

cliente1 = cadastrar_cliente(nome="Maria Silva", email="maria@email.com")
print(cliente1)

ğŸ”¹ SaÃ­da esperada:

{'nome': 'Maria Silva', 'email': 'maria@email.com', 'telefone': 'NÃ£o informado', 'cidade': 'Cidade nÃ£o especificada'}


ğŸ“Œ ExercÃ­cio 2: Sistema de FuncionÃ¡rios

Crie um sistema de funcionÃ¡rios usando heranÃ§a mÃºltipla. O sistema deve ter trÃªs classes principais:

    Pessoa (classe base) â†’ Possui nome e idade.

    Funcionario (herda de Pessoa) â†’ Possui cargo e salario.

    Beneficios â†’ Classe separada que fornece benefÃ­cios, como vale-transporte e vale-alimentaÃ§Ã£o.

    Gerente (herda de Funcionario e Beneficios) â†’ Adiciona um bÃ´nus salarial e exibe as informaÃ§Ãµes completas.

Regras do ExercÃ­cio

âœ… A classe Pessoa deve armazenar nome e idade.
âœ… A classe Funcionario deve armazenar cargo e salÃ¡rio.
âœ… A classe Beneficios deve definir os valores de vale-transporte e vale-alimentaÃ§Ã£o.
âœ… A classe Gerente deve herdar de Funcionario e Beneficios, e adicionar um bÃ´nus de 10% sobre o salÃ¡rio.
âœ… A funÃ§Ã£o exibir_dados deve mostrar todas as informaÃ§Ãµes do gerente.